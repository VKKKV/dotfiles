" basic
syntax enable
set relativenumber
set encoding=utf-8
set shiftwidth=4
set softtabstop=4
set tabstop=4
set smarttab
set wildmenu
set autoread
set autowrite
set smartindent
set autoindent
set incsearch
set hlsearch
set ignorecase
set colorcolumn=80
set textwidth=80
set formatoptions+=tcroq
set splitbelow
set splitright
set hidden
set nobackup
set nowritebackup
set cmdheight=2
set signcolumn=yes
set shortmess+=c
set updatetime=200
set lazyredraw
set ttyfast
set cursorline
filetype indent on
filetype plugin on

" color in tmux
if (empty($TMUX) && getenv('TERM_PROGRAM') != 'Apple_Terminal')
	if (has("termguicolors"))
		set termguicolors
	endif
endif

let mapleader=" "
noremap <Leader>q ZZ<CR>

" tab
nnoremap <leader>tt :tabnew<CR>
nnoremap <leader>tn :tabnext<CR>
nnoremap <leader>tp :tabprev<CR>

" buffer
nnoremap <Leader>bp :bp<CR>
nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>bd :bd<CR>
nnoremap <leader>bl :ls<CR>
nnoremap <leader>s :split<CR>
nnoremap <leader>v :vsplit<CR>


" date time
nnoremap <Leader>dt "=strftime('%Y-%m-%d %H:%M:%S')<CR>P 

" markdown code 
nnoremap <Leader>mc {O<DOWN>```<DOWN><ESC>}i```<ESC><DOWN>O<ESC>
nnoremap <Leader>mp :MarkdownPreview<CR>
" keybind gf gotoFile
source "~/.config/vim/open_file_under_cursor.vim"

call plug#begin()
" fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" file search
nnoremap <Leader>ff :Files<CR> 
" content search
nnoremap <Leader>fg :Rg<CR>    

" use % jump
Plug 'andymass/matchup.vim'
" auto disable search highlight
Plug 'romainl/vim-cool'
" discord rpc
Plug 'Stoozy/vimcord'
Plug 'christoomey/vim-tmux-navigator'
" cursor move smoothly
Plug 'psliwka/vim-smoothie'
Plug 'tpope/vim-surround'

"snippets
Plug 'honza/vim-snippets'
Plug 'sirver/ultisnips'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" latex
Plug 'lervag/vimtex'
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
let maplocalleader = ","

" img paste
Plug 'ferrine/md-img-paste.vim'
autocmd FileType markdown nmap <buffer><silent> <leader>mp :call mdip#MarkdownClipboardImage()<CR>

" cP cV
Plug 'christoomey/vim-system-copy'

" MarkdownPreview
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && npx --yes yarn install' }
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 0
let g:mkdp_refresh_slow = 1
let g:mkdp_command_for_global = 1
let g:mkdp_open_to_the_world = 1
let g:mkdp_browser = 'zen-browser'
let g:mkdp_theme = 'dark'

" leader+cc & leader+cv
Plug 'preservim/nerdcommenter'
let g:NERDCreateDefaultMappings = 1
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDAltDelims_java = 1
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1

" THEME
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts = 1
let g:airline_section_z = "%3p%% %l:%c"
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

" vue
Plug 'posva/vim-vue'

" nerdtree
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
nnoremap <Leader>nt :NERDTreeToggle<CR>
" show hidden file
let NERDTreeShowHidden=1
" dont quit tree while open file
let NERDTreeQuitOnOpen=0
" while delete file
let NERDTreeAutoDeleteBuffer=1
" option confirm
let NERDTreeConfirmDelete='yes'
let NERDTreeConfirmRename='yes'
Plug 'PhilRunninger/nerdtree-visual-selection', { 'on': 'NERDTreeToggle' }

" coc
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
let g:coc_node_path='/usr/bin/node'
let g:coc_global_extensions = [
			\'coc-marketplace',
			\'coc-ltex',
			\'coc-cl',
			\'coc-json',
			\'coc-toml',
			\'coc-tsserver',
			\'coc-git',
			\'coc-sumneko-lua',
			\'coc-pairs',
			\'coc-snippets']
" coc git
" show chunk diff at current position
nmap gs <Plug>(coc-git-chunkinfo)
" show commit contains current position
nmap gc <Plug>(coc-git-commit)

" coc vim
Plug 'yaegassy/coc-volar', { 'do': 'yarn install --frozen-lockfile' }
Plug 'yaegassy/coc-volar-tools', { 'do': 'yarn install --frozen-lockfile' }
call plug#end()

" coc.nvim config

" Note: the `coc-snippets` extension is required for this to work.
" Map <tab> for trigger completion, completion confirm, snippet expand and jump, jump outside closing bracket or other pairs of symbols like VSCode
inoremap <silent><expr> <Tab>
			\ coc#pum#visible() ? coc#pum#next(1):
			\ coc#expandableOrJumpable() ?
			\ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
			\ NextCharIsPair() ? "\<Right>" :
			\ CheckBackspace() ? "\<Tab>" :
			\ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

function! CheckBackspace() abort
	let col = col('.') - 1 
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction
function! NextCharIsPair() abort
	let col = col('.') - 1 
	let l:next_char = getline('.')[col]
	return l:next_char =~# ')\|]\|}\|>\|''\|"\|`'
endfunction
let g:coc_snippet_next = '<tab>'

" coc_pairs
autocmd FileType tex let b:coc_pairs = [["$", "$"]]
" To make <CR> to confirm selection of selected complete item or notify coc.nvim
" to format on enter, use:
inoremap <silent><expr> <cr> coc#pum#visible() && coc#pum#info()['index'] != -1 ? coc#pum#confirm()
			\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
	if CocAction('hasProvider', 'hover')
		call CocActionAsync('doHover')
	else
		call feedkeys('K', 'in')
	endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
	autocmd!
	" Setup formatexpr specified filetype(s)
	autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	" Update signature help on jump placeholder
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" coc marketplace
nnoremap <silent><nowait> <space>a  :<C-u>CocList marketplace<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>l  :<C-u>CocListResume<CR>

autocmd vimenter * ++nested colorscheme gruvbox
set background=dark

