# Oh-my-zsh installation path
ZSH=/usr/share/oh-my-zsh/

# Powerlevel10k theme path
source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme

# List of plugins used
plugins=( git sudo zsh-256color zsh-autosuggestions zsh-syntax-highlighting)
# plugins=( git sudo zsh-256color) 
source $ZSH/oh-my-zsh.sh

# In case a command is not found, try to find the package that has it
function command_not_found_handler {
    local purple='\e[1;35m' bright='\e[0;1m' green='\e[1;32m' reset='\e[0m'
    printf 'zsh: command not found: %s\n' "$1"
    local entries=( ${(f)"$(/usr/bin/pacman -F --machinereadable -- "/usr/bin/$1")"} )
    if (( ${#entries[@]} )) ; then
        printf "${bright}$1${reset} may be found in the following packages:\n"
        local pkg
        for entry in "${entries[@]}" ; do
            local fields=( ${(0)entry} )
            if [[ "$pkg" != "${fields[2]}" ]]; then
                printf "${purple}%s/${bright}%s ${green}%s${reset}\n" "${fields[1]}" "${fields[2]}" "${fields[3]}"
            fi
            printf '    /%s\n' "${fields[4]}"
            pkg="${fields[2]}"
        done
    fi
    return 127
}

# Detect AUR wrapper
if pacman -Qi yay &>/dev/null; then
   aurhelper="yay"
elif pacman -Qi paru &>/dev/null; then
   aurhelper="paru"
fi

function in {
    local -a inPkg=("$@")
    local -a arch=()
    local -a aur=()

    for pkg in "${inPkg[@]}"; do
        if pacman -Si "${pkg}" &>/dev/null; then
            arch+=("${pkg}")
        else
            aur+=("${pkg}")
        fi
    done

    if [[ ${#arch[@]} -gt 0 ]]; then
        sudo pacman -S "${arch[@]}"
    fi

    if [[ ${#aur[@]} -gt 0 ]]; then
        ${aurhelper} -S "${aur[@]}"
    fi
}



# Helpful aliases
# alias c='clear' # clear terminal
alias l='eza -lh --icons=auto' # long list
alias ls='eza -1 --icons=auto' # short list
alias ll='eza -lha --icons=auto --sort=name --group-directories-first' # long list all
alias ld='eza -lhD --icons=auto' # long list dirs
alias lt='eza --icons=auto --tree' # list folder as tree
# alias un='$aurhelper -Rns' # uninstall package
# alias up='$aurhelper -Syu' # update system/package/aur
# alias pl='$aurhelper -Qs' # list installed package
# alias pa='$aurhelper -Ss' # list available package
# alias pc='$aurhelper -Sc' # remove unused cache
# alias po='$aurhelper -Qtdq | $aurhelper -Rns -' # remove unused packages, also try > $aurhelper -Qqd | $aurhelper -Rsu --print -

#MyAlias
# alias vc='code' # gui code editor
alias ra=ranger
alias wps='QT_SCREEN_SCALE_FACTORS=1 QT_FONT_DPI=144 wps'
# alias config='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias vi=vim
alias baca='/home/arch/.conda/envs/baca/bin/baca'
alias yz=yazi



# Directory navigation shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# Always mkdir a path (this doesn't inhibit functionality to make a single dir)
alias mkdir='mkdir -p'

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Display Pokemon
# pokemon-colorscripts --no-title -r 1,3,6
# Display neofetch
# neofetch | lolcat

# fuck
eval $(thefuck --alias)

# Helpful export
export CRYPTOGRAPHY_OPENSSL_NO_LEGACY=1
export PATH="$PATH:./node_modules/.bin:./.local/bin/"



# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/opt/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/opt/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<





#	.---------------------------------------------------------------------.
#	| ________ ________  ________ ________  ________  ________   ________ |
#	||\  _____\\_____  \|\  _____\\   ____\|\   __  \|\   ___  \|\  _____\|
#	|\ \  \__/ \|___/  /\ \  \__/\ \  \___|\ \  \|\  \ \  \\ \  \ \  \__/ |
#	| \ \   __\    /  / /\ \   __\\ \  \    \ \  \\\  \ \  \\ \  \ \   __\|
#	|  \ \  \_|   /  /_/__\ \  \_| \ \  \____\ \  \\\  \ \  \\ \  \ \  \_||
#	|   \ \__\   |\________\ \__\   \ \_______\ \_______\ \__\\ \__\ \__\ |
#	|    \|__|    \|_______|\|__|    \|_______|\|_______|\|__| \|__|\|__| |
#	'---------------------------------------------------------------------'
# fzf setting
# modify from https://github.com/chinanf-boy/
# export FZF_DEFAULT_OPTS='--bind=ctrl-t:top,change:top --bind ctrl-e:down,ctrl-u:up'
# export FZF_DEFAULT_OPTS='--bind ctrl-e:down,ctrl-u:up --preview "[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2> /dev/null | head -500"'
# export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'
# export FZF_DEFAULT_OPTS='--preview "[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2> /dev/null | head -500"'
export FZF_DEFAULT_OPTS='--preview "[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || ( bat --color=always --style=numbers --line-range=:500 {} ||ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2> /dev/null | head -500"'
# export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!**/.git/*"'
export FZF_DEFAULT_COMMAND='fd'
export FZF_COMPLETION_TRIGGER='\'
export FZF_TMUX=1
export FZF_TMUX_HEIGHT='80%'
# export fzf_preview_cmd='[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2> /dev/null | head -500'


# 【样式】调整
# export FZF_COMPLETION_OPTS='--border --info=inline'
# **快捷键进行【命令行】补全，调用此函数
# _fzf_compgen_path() {
#  fd --hidden --follow --exclude ".git" --exclude "node_modules" --exclude "gems" . ~ "$1"
#}
# **快捷键进行【路径】补全，调用此函数
#_fzf_compgen_dir() {
#  fd --type d --hidden --follow --exclude ".git" --exclude "node_modules" --exclude "gems" . ~ "$1"
#}
# **快捷键，根据命令名称进行【任务分配】
#_fzf_comprun() {
#  local command=$1
#  shift

#  case "$command" in
    # cd命令，使用该配置
#    cd) fzf --preview 'lsd --tree {} | head -200' "$@" ;;
    # export、unset使用该配置
#    export|unset) fzf --preview "eval 'echo \$'{}" "$@" ;;
    # ssh使用
#    ssh) fzf --preview 'dig {}' "$@" ;;
    # 其他命令，使用该配置
#    *) fzf --preview 'bat -n --color=always {}' "$@" ;;
#  esac
#}


