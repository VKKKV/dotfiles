" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

" Source your .vimrc
" source ~/.vimrc

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.

set scrolloff=5

" Do incremental searching.
set incsearch

" Don't use Ex mode, use Q for formatting.
map Q gq

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
set clipboard+=unnamed
set relativenumber
set shiftwidth=4
set softtabstop=4
set tabstop=4
set smarttab
set wildmenu
set autoread
set autowrite
set smartindent
set autoindent
set incsearch
set hlsearch
set ignorecase
set colorcolumn=80
set textwidth=80
set formatoptions+=tcroq
set splitbelow
set splitright
set hidden
set encoding=utf-8
set nobackup
set nowritebackup
set cmdheight=2
set signcolumn=yes
set shortmess+=c
set updatetime=300
set lazyredraw
set cursorline

filetype indent on
filetype plugin on

let mapleader=" "
nnoremap <Leader>s :w!<CR>
noremap <Leader>q :q!<CR>
nnoremap <leader>t :tabnew<CR>
nnoremap <Leader>p :bp<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>x :bd<CR>
nnoremap cP "+yy
vnoremap cp "+y
nnoremap cv "+p

Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
vnoremap <silent> <leader>cc :Commentary<CR>
nnoremap <silent> <leader>cc V:Commentary<CR>

Plug 'preservim/nerdtree'
nnoremap <Leader>b :NERDTreeToggle<CR>

let g:ideavim_enable_vim_like_bindings = 1
let g:ideavim_enable_tab_completion = 1
let g:ideavim_enable_smart_indent = 1
let g:ideavim_enable_auto_indent = 1
let g:ideavim_enable_line_number_column = 1
" let g:ideavim_enable_column_number_column = 1

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
""  \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)
